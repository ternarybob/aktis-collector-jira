name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Update .version file with build timestamp
      run: |
        if [ -f ".version" ]; then
          VERSION=$(grep "^version:" .version | sed 's/^version:\s*//' | xargs)
          BUILD="${GITHUB_RUN_NUMBER}-$(date +%m-%d-%H-%M-%S)"

          cat > .version << EOF
        version: ${VERSION}
        build: ${BUILD}
        EOF

          echo "Updated .version file with build: ${BUILD}"
        else
          echo "Warning: .version file not found"
        fi

    - name: Build collector binary
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p bin

        if [ -f ".version" ]; then
          VERSION=$(grep "^version:" .version | sed 's/^version:\s*//' | xargs)
          BUILD="${GITHUB_RUN_NUMBER}-$(date +%m-%d-%H-%M-%S)"
        else
          VERSION="dev"
          BUILD="unknown"
        fi

        BINARY_NAME="aktis-collector-jira"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi

        go build \
          -ldflags="-w -s -X aktis-collector-jira/internal/common.Version=${VERSION} -X aktis-collector-jira/internal/common.Build=${BUILD} -X aktis-collector-jira/internal/common.GitCommit=${GITHUB_SHA}" \
          -o bin/${BINARY_NAME} ./cmd/aktis-collector-jira

        if [ "${{ matrix.goos }}" != "windows" ]; then
          chmod +x bin/${BINARY_NAME}
        fi

        ls -la bin/
        file bin/${BINARY_NAME}

    - name: Create release archive
      run: |
        mkdir -p release

        cp bin/* release/

        if [ -f "deployments/aktis-collector-jira.toml" ]; then
          cp deployments/aktis-collector-jira.toml release/aktis-collector-jira.toml.example
        fi

        if [ -f "README.md" ]; then
          cp README.md release/
        fi

        tar -czf aktis-collector-jira-${{ matrix.suffix }}.tar.gz -C release .

        sha256sum aktis-collector-jira-${{ matrix.suffix }}.tar.gz > aktis-collector-jira-${{ matrix.suffix }}.tar.gz.sha256

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aktis-collector-jira-${{ matrix.suffix }}
        path: |
          aktis-collector-jira-${{ matrix.suffix }}.*
        retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files

        find artifacts -name "aktis-collector-jira-*" -type f -exec mv {} release-files/ \;

        ls -la release-files/

    - name: Get version
      id: version
      run: |
        if [ -f ".version" ]; then
          VERSION=$(grep "^version:" .version | sed 's/^version:\s*//' | xargs)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Found version: ${VERSION}"
        else
          echo "version=1.0.0" >> $GITHUB_OUTPUT
          echo "Using default version: 1.0.0"
        fi

    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Aktis Jira Collector v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Aktis Jira Collector v${{ steps.version.outputs.version }}

          ### Features
          - **Jira Integration**: Collect tickets from Jira projects with customizable filters
          - **BBolt Storage**: Efficient local storage with automatic backups
          - **Incremental Updates**: Only collect changed tickets since last run
          - **Plugin SDK Compatible**: Works with aktis-collector via plugin interface
          - **Cross-Platform**: Binaries for Linux and Windows on AMD64

          ### Download
          Choose the appropriate binary for your system:
          - **Linux AMD64**: `aktis-collector-jira-linux-amd64.tar.gz`
          - **Windows AMD64**: `aktis-collector-jira-windows-amd64.tar.gz`

          ### Usage
          ```bash
          # Show version
          ./aktis-collector-jira -version

          # Show help
          ./aktis-collector-jira -help

          # Run with config file
          ./aktis-collector-jira -config aktis-collector-jira.toml

          # Validate config
          ./aktis-collector-jira -validate -config aktis-collector-jira.toml

          # Incremental update mode
          ./aktis-collector-jira -config aktis-collector-jira.toml -update
          ```

          See the included README.md for detailed documentation.
        files: |
          release-files/*